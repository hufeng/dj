// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e test suite test basic e 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "
    /**
    * 用户id
    */",
      "name": "id",
      "type": Object {
        "javaType": "java.Integer",
        "tsInit": "",
        "tsType": "number",
      },
    },
    Object {
      "comment": "
    /**
    * 用户名
    */",
      "name": "name",
      "type": Object {
        "javaType": "java.String",
        "tsInit": "",
        "tsType": "string",
      },
    },
    Object {
      "comment": "
    /**
    * 邮箱
    */",
      "name": "email",
      "type": Object {
        "javaType": "java.String",
        "tsInit": "",
        "tsType": "string",
      },
    },
    Object {
      "comment": "",
      "name": "color",
      "type": Object {
        "javaType": "((v:Color) => java.enum('org.apache.dubbo.domain.enum.Color', Color[v]))",
        "tsInit": "",
        "tsType": "Color",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {Color,IColor}from './enum/Color'",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test basic e 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { Color, IColor } from './enum/Color'

export interface IUser {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string

  /**
   * 邮箱
   */
  email: string

  color: Color
}

export class User {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string

  /**
   * 邮箱
   */
  email: string

  color: Color

  constructor(props: IUser) {
    this.id = props.id
    this.name = props.name
    this.email = props.email
    this.color = props.color
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      id: java.Integer(this.id),
      name: java.String(this.name),
      email: java.String(this.email),
      color: ((v: Color) =>
        java.enum('org.apache.dubbo.domain.enum.Color', Color[v]))(this.color),
    })
  }
}
"
`;

exports[`e test suite test first-level list 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "
    /**
    * 用户id
    */",
      "name": "id",
      "type": Object {
        "javaType": "java.Integer",
        "tsInit": "",
        "tsType": "number",
      },
    },
    Object {
      "comment": "
    /**
    * 用户名
    */",
      "name": "name",
      "type": Object {
        "javaType": "java.String",
        "tsInit": "",
        "tsType": "string",
      },
    },
    Object {
      "comment": "
    /**
    * 爱好
    */",
      "name": "likes",
      "type": Object {
        "javaType": "((val:Array<string>=[]) => java.List(val.map(v => java.String(v))))",
        "tsInit": "",
        "tsType": "Array<string>",
      },
    },
    Object {
      "comment": "",
      "name": "addrs",
      "type": Object {
        "javaType": "((list:Array<IAddress>=[]) => java.List(list.map(v => new Address(v).__fields2java())))",
        "tsInit": "((list:Array<IAddress>) => list.map(v => new Address(v)))",
        "tsType": "Array<IAddress>",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {IAddress}from './Address'",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test first-level list 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { IAddress } from './Address'

export interface IUser {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string

  /**
   * 爱好
   */
  likes: Array<string>

  addrs: Array<IAddress>
}

export class User {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string

  /**
   * 爱好
   */
  likes: Array<string>

  addrs: Array<IAddress>

  constructor(props: IUser) {
    this.id = props.id
    this.name = props.name
    this.likes = props.likes
    this.addrs = ((list: Array<IAddress>) => list.map((v) => new Address(v)))(
      props.addrs
    )
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      id: java.Integer(this.id),
      name: java.String(this.name),
      likes: ((val: Array<string> = []) =>
        java.List(val.map((v) => java.String(v))))(this.likes),
      addrs: ((list: Array<IAddress> = []) =>
        java.List(list.map((v) => new Address(v).__fields2java())))(this.addrs),
    })
  }
}
"
`;

exports[`e test suite test nested generic 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "",
      "name": "email",
      "type": Object {
        "javaType": "((val:Array<Array<string>>=[]) => java.List(val.map(v => ((val:Array<string>=[]) => java.List(val.map(v => java.String(v))))(v))))",
        "tsInit": "",
        "tsType": "Array<Array<string>>",
      },
    },
    Object {
      "comment": "",
      "name": "addrs",
      "type": Object {
        "javaType": "((val:Array<Array<IAddress>>=[]) => java.List(val.map(v => ((list:Array<IAddress>=[]) => java.List(list.map(v => new Address(v).__fields2java())))(v))))",
        "tsInit": "",
        "tsType": "Array<Array<IAddress>>",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {IAddress}from './Address'",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test nested generic 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { IAddress } from './Address'

export interface IUser {
  email: Array<Array<string>>

  addrs: Array<Array<IAddress>>
}

export class User {
  email: Array<Array<string>>

  addrs: Array<Array<IAddress>>

  constructor(props: IUser) {
    this.email = props.email
    this.addrs = props.addrs
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      email: ((val: Array<Array<string>> = []) =>
        java.List(
          val.map((v) =>
            ((val: Array<string> = []) =>
              java.List(val.map((v) => java.String(v))))(v)
          )
        ))(this.email),
      addrs: ((val: Array<Array<IAddress>> = []) =>
        java.List(
          val.map((v) =>
            ((list: Array<IAddress> = []) =>
              java.List(list.map((v) => new Address(v).__fields2java())))(v)
          )
        ))(this.addrs),
    })
  }
}
"
`;
