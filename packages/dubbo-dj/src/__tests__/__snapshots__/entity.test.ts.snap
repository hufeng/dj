// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e test suite test basic e 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "
    /**
    * 用户id
    */",
      "name": "id",
      "type": Object {
        "javaType": "java.Integer",
        "tsType": "number",
      },
    },
    Object {
      "comment": "
    /**
    * 用户名
    */",
      "name": "name",
      "type": Object {
        "javaType": "java.String",
        "tsType": "string",
      },
    },
    Object {
      "comment": "
    /**
    * 邮箱
    */",
      "name": "email",
      "type": Object {
        "javaType": "java.String",
        "tsType": "string",
      },
    },
    Object {
      "comment": "",
      "name": "color",
      "type": Object {
        "javaType": "((v:any) => java.enum('org.apache.dubbo.enum.Color', Color[v]))",
        "tsType": "Color",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {Color}from 'org.apache.dubbo.enum.Color';",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test basic e 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { Color } from 'org.apache.dubbo.enum.Color'

export interface IUser {
  /**
   * 用户id
   */ id: number

  /**
   * 用户名
   */ name: string

  /**
   * 邮箱
   */ email: string
  color: Color
}

export default class User {
  /**
   * 用户id
   */ id: number

  /**
   * 用户名
   */ name: string

  /**
   * 邮箱
   */ email: string
  color: Color

  constructor(props: IUser) {
    this.id = props.id
    this.name = props.name
    this.email = props.email
    this.color = props.color
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      id: java.Integer(this.id),
      name: java.String(this.name),
      email: java.String(this.email),
      color: ((v: any) => java.enum('org.apache.dubbo.enum.Color', Color[v]))(
        this.color
      ),
    })
  }
}
"
`;

exports[`e test suite test first-level list 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "
    /**
    * 用户id
    */",
      "name": "id",
      "type": Object {
        "javaType": "java.Integer",
        "tsType": "number",
      },
    },
    Object {
      "comment": "
    /**
    * 用户名
    */",
      "name": "name",
      "type": Object {
        "javaType": "java.String",
        "tsType": "string",
      },
    },
    Object {
      "comment": "
    /**
    * 爱好
    */",
      "name": "likes",
      "type": Object {
        "javaType": "(function withList(val:Array<any>=[]){return java.List(val.map(v => java.String(v)))})",
        "tsType": "Array<string>",
      },
    },
    Object {
      "comment": "",
      "name": "addrs",
      "type": Object {
        "javaType": "(function withList(val:Array<any>=[]) {return java.List(val.map(v => v.__fields2java()))})",
        "tsType": "Array<IAddr>",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {IAddr}from 'org.apache.dubbo.entity.Addr';",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test first-level list 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { IAddr } from 'org.apache.dubbo.entity.Addr'

export interface IUser {
  /**
   * 用户id
   */ id: number

  /**
   * 用户名
   */ name: string

  /**
   * 爱好
   */ likes: Array<string>
  addrs: Array<IAddr>
}

export default class User {
  /**
   * 用户id
   */ id: number

  /**
   * 用户名
   */ name: string

  /**
   * 爱好
   */ likes: Array<string>
  addrs: Array<IAddr>

  constructor(props: IUser) {
    this.id = props.id
    this.name = props.name
    this.likes = props.likes
    this.addrs = props.addrs
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      id: java.Integer(this.id),
      name: java.String(this.name),
      likes: (function withList(val: Array<any> = []) {
        return java.List(val.map((v) => java.String(v)))
      })(this.likes),
      addrs: (function withList(val: Array<any> = []) {
        return java.List(val.map((v) => v.__fields2java()))
      })(this.addrs),
    })
  }
}
"
`;

exports[`e test suite test nested generic 1`] = `
Object {
  "comment": "",
  "fields": Array [
    Object {
      "comment": "",
      "name": "email",
      "type": Object {
        "javaType": "(function withList(val:Array<any>=[]){return java.List(val.map(v => (function withList(val:Array<any>=[]){return java.List(val.map(v => java.String(v)))})(v)))})",
        "tsType": "Array<Array<string>>",
      },
    },
    Object {
      "comment": "",
      "name": "addrs",
      "type": Object {
        "javaType": "(function withList(val:Array<any>=[]){return java.List(val.map(v => (function withList(val:Array<any>=[]) {return java.List(val.map(v => v.__fields2java()))})(v)))})",
        "tsType": "Array<Array<IAddr>>",
      },
    },
  ],
  "fullName": "org.apache.dubbo.domain.User",
  "imports": "import  java from 'js-to-java';import {IAddr}from 'org.apache.dubbo.entity.Addr';",
  "infName": "IUser",
  "mott": "
      /**
       * auto generated by dubbo dj
       * ~~~ 💗 machine coding 💗 ~~~
       */
    ",
  "shortName": "User",
}
`;

exports[`e test suite test nested generic 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import { IAddr } from 'org.apache.dubbo.entity.Addr'

export interface IUser {
  email: Array<Array<string>>
  addrs: Array<Array<IAddr>>
}

export default class User {
  email: Array<Array<string>>
  addrs: Array<Array<IAddr>>

  constructor(props: IUser) {
    this.email = props.email
    this.addrs = props.addrs
  }

  __fields2java() {
    return java('org.apache.dubbo.domain.User', {
      email: (function withList(val: Array<any> = []) {
        return java.List(
          val.map((v) =>
            (function withList(val: Array<any> = []) {
              return java.List(val.map((v) => java.String(v)))
            })(v)
          )
        )
      })(this.email),
      addrs: (function withList(val: Array<any> = []) {
        return java.List(
          val.map((v) =>
            (function withList(val: Array<any> = []) {
              return java.List(val.map((v) => v.__fields2java()))
            })(v)
          )
        )
      })(this.addrs),
    })
  }
}
"
`;
