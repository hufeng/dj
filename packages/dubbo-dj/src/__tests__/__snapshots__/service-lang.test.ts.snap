// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test s lang suite test baisc s 1`] = `
DubboService {
  "comment": "",
  "deps": DubboDep {
    "depMap": Map {
      "org.apache.dubbo.entity.Addr" => Object {
        "defaultModule": "",
        "is3rdLib": false,
        "noneDefaultModules": Set {
          "IAddr",
        },
      },
    },
  },
  "fullName": "org.apache.dubbo.s.HelloService",
  "funcs": Array [
    Func {
      "args": Array [
        Object {
          "comment": undefined,
          "name": "name",
          "type": Object {
            "javaType": "java.String",
            "tsType": "string",
          },
        },
        Object {
          "comment": undefined,
          "name": "email",
          "type": Object {
            "javaType": "java.String",
            "tsType": "string",
          },
        },
      ],
      "comment": "",
      "name": "sayHello",
      "ret": Object {
        "javaType": "java.String",
        "tsType": "string",
      },
    },
    Func {
      "args": Array [
        Object {
          "comment": undefined,
          "name": "name",
          "type": Object {
            "javaType": "(function withList(val:Array<any>=[]){return java.List(val.map(v => java.String(v)))})",
            "tsType": "Array<string>",
          },
        },
        Object {
          "comment": undefined,
          "name": "addr",
          "type": Object {
            "javaType": "(function withList(val:Array<any>=[]) {return java.List(val.map(v => v.__fields2java()))})",
            "tsType": "Array<IAddr>",
          },
        },
      ],
      "comment": "",
      "name": "sayWorld",
      "ret": Object {
        "javaType": "(function withList(val:Array<any>=[]){return java.List(val.map(v => java.Integer(v)))})",
        "tsType": "Array<number>",
      },
    },
  ],
  "infName": "IHelloService",
  "shortName": "HelloService",
}
`;

exports[`test s lang suite test baisc s 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import HelloService from './base/HelloService'

export default class HelloServiceImpl extends HelloService {
  async sayHello(sayHello: string, sayHello: string): Promise<string> {
    throw new Errro('Not implemented sayHello method')
  }

  async sayWorld(
    sayWorld: Array<string>,
    sayWorld: Array<IAddr>
  ): Promise<Array<number>> {
    throw new Errro('Not implemented sayWorld method')
  }
}
"
`;

exports[`test s lang suite test baisc s 3`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import { IAddr } from 'org.apache.dubbo.entity.Addr'

export default abstract class HelloService {
  dubboInterface = 'org.apache.dubbo.s.HelloService'

  methods = {
    sayHello: async (name: string, email: string) => {
      const val = await this.sayHello(name, email)
      return java.String(val)
    },
    sayWorld: async (name: Array<string>, addr: Array<IAddr>) => {
      const val = await this.sayWorld(name, addr)
      return (function withList(val: Array<any> = []) {
        return java.List(val.map((v) => java.Integer(v)))
      })(val)
    },
  }

  abstract async sayHello(name: string, email: string): Promise<string>

  abstract async sayWorld(
    name: Array<string>,
    addr: Array<IAddr>
  ): Promise<Array<number>>
}
"
`;

exports[`test s lang suite test baisc s 4`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import { Dubbo, TDubboCallResult } from 'apache-dubbo-js'
import { IAddr } from 'org.apache.dubbo.entity.Addr'

export interface IHelloService {}

export function HelloService(dubbo: Dubbo): IHelloService {
  return dubbo.proxyService<IHelloService>({
    dubboInterface: 'org.apache.dubbo.s.HelloService',
    methods: {
      sayHello(name: string, email: string): any {
        return [name, email]
      },
      sayWorld(name: Array<string>, addr: Array<IAddr>): any {
        return [name, addr]
      },
    },
  })
}
"
`;
