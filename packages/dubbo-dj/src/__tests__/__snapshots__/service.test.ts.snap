// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test s lang suite test basic s 1`] = `
DubboService {
  "comment": "",
  "deps": Dep {
    "depMap": Map {
      "org/apache/dubbo/domain/Address" => Object {
        "defaultModule": "",
        "is3rdModule": false,
        "noneDefaultModules": Set {
          "IAddress",
        },
      },
    },
  },
  "fullName": "org.apache.dubbo.service.HelloService",
  "funcs": Array [
    Func {
      "args": Array [
        Object {
          "comment": undefined,
          "name": "name",
          "type": Object {
            "javaType": "java.String",
            "tsInit": "",
            "tsType": "string",
          },
        },
        Object {
          "comment": undefined,
          "name": "email",
          "type": Object {
            "javaType": "java.String",
            "tsInit": "",
            "tsType": "string",
          },
        },
      ],
      "comment": "",
      "name": "sayHello",
      "ret": Object {
        "javaType": "java.String",
        "tsInit": "",
        "tsType": "string",
      },
    },
    Func {
      "args": Array [
        Object {
          "comment": undefined,
          "name": "name",
          "type": Object {
            "javaType": "((val:Array<string>=[]) => java.List(val.map(v => java.String(v))))",
            "tsInit": "",
            "tsType": "Array<string>",
          },
        },
        Object {
          "comment": undefined,
          "name": "addr",
          "type": Object {
            "javaType": "((list:Array<IAddress>=[]) => java.List(list.map(v => new Address(v).__fields2java())))",
            "tsInit": "((list:Array<IAddress>) => list.map(v => new Address(v)))",
            "tsType": "Array<IAddress>",
          },
        },
      ],
      "comment": "",
      "name": "sayWorld",
      "ret": Object {
        "javaType": "((val:Array<number>=[]) => java.List(val.map(v => java.Integer(v))))",
        "tsInit": "",
        "tsType": "Array<number>",
      },
    },
  ],
  "infName": "IHelloService",
  "modulePath": "org/apache/dubbo/service/HelloService",
  "shortName": "HelloService",
}
`;

exports[`test s lang suite test basic s 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import { IAddress } from '../domain/Address'
import HelloService from './base/HelloService'

export default class HelloServiceImpl extends HelloService {
  async sayHello(sayHello: string, sayHello: string): Promise<string> {
    throw new Error('Not implemented sayHello method')
  }

  async sayWorld(
    sayWorld: Array<string>,
    sayWorld: Array<IAddress>
  ): Promise<Array<number>> {
    throw new Error('Not implemented sayWorld method')
  }
}
"
`;

exports[`test s lang suite test basic s 3`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import java from 'js-to-java'
import { IAddress } from '../../domain/Address'

export default abstract class HelloService {
  dubboInterface = 'org.apache.dubbo.service.HelloService'

  methods = {
    sayHello: async (name: string, email: string) => {
      const val = await this.sayHello(name, email)
      return java.String(val)
    },
    sayWorld: async (name: Array<string>, addr: Array<IAddress>) => {
      const val = await this.sayWorld(name, addr)
      return ((val: Array<number> = []) =>
        java.List(val.map((v) => java.Integer(v))))(val)
    },
  }

  abstract sayHello(name: string, email: string): Promise<string>

  abstract sayWorld(
    name: Array<string>,
    addr: Array<IAddress>
  ): Promise<Array<number>>
}
"
`;

exports[`test s lang suite test basic s 4`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ ðŸ’— machine coding ðŸ’— ~~~
 */

import { Dubbo, TDubboCallResult, java } from '@dubbo/dubbo-consumer'
import { IAddress } from '../domain/Address'

export interface IHelloService {
  sayHello(name: string, email: string): TDubboCallResult<string>
  sayWorld(
    name: Array<string>,
    addr: Array<IAddress>
  ): TDubboCallResult<Array<number>>
}

export function HelloService(dubbo: Dubbo): IHelloService {
  return dubbo.proxyService<IHelloService>({
    dubboInterface: 'org.apache.dubbo.service.HelloService',
    methods: {
      sayHello(name: string, email: string) {
        return [java.String(name), java.String(email)]
      },
      sayWorld(name: Array<string>, addr: Array<IAddress>) {
        return [
          ((val: Array<string> = []) =>
            java.List(val.map((v) => java.String(v))))(name),
          ((list: Array<IAddress> = []) =>
            java.List(list.map((v) => new Address(v).__fields2java())))(addr),
        ]
      },
    },
  })
}
"
`;
