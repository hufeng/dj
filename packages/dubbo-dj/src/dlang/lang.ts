import { DubboDep } from './lang-deps'

export default class Lang {
  fullName: string
  shortName: string
  // ts interface name
  infName: string

  deps: DubboDep
  comment: string

  constructor(fullClsName: string, comment?: string) {
    this.fullName = fullClsName
    this.shortName = fullClsName.split('.').pop() || ''
    this.infName = `I${this.shortName}`

    // init dep
    this.deps = new DubboDep()
    this.comment = this.wrapComment(comment)
  }

  wrapComment(comment: string = '') {
    return comment
      ? `
    /**
    * ${comment}
    */`
      : ''
  }

  // gen our mott
  get mott() {
    return `
      /**
       * auto generated by dubbo dj
       * ~~~ ðŸ’— machine coding ðŸ’— ~~~
       */
    `
  }

  imports(deps: DubboDep): string {
    const buff = []
    for (let [k, v] of deps.getDepMap().entries()) {
      buff.push('import ')
      if (v.defaultModule != '') {
        buff.push(` ${v.defaultModule} `)
        if (v.noneDefaultModules.size > 0) {
          buff.push(',')
        }
      }
      if (v.noneDefaultModules.size > 0) {
        buff.push(`{${[...v.noneDefaultModules].join(',')}}`)
      }
      buff.push(`from '${k}';`)
    }
    return buff.join('')
  }
}
